name: 🚀 Pipeline | Deploy Code on Main Server

on:
  push:
    branches:
    - development

jobs:
  deploy:
    name: 🎉 Deploy Frontend and Backend
    runs-on: ubuntu-latest

    steps:
    - name: 🚚 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔍 Check for changes in composer.json
      id: check_composer_changes
      run: |
        echo "Checking composer.json changes..."
        git fetch origin main
        LAST_COMMIT=$(git rev-parse HEAD)
        PREV_COMMIT=$(git rev-parse HEAD^)

        if git diff --name-only "$PREV_COMMIT" "$LAST_COMMIT" | grep "composer.json"; then
          echo "composer_json_changed=true" >> $GITHUB_ENV
          echo "composer.json has changed."
        else
          echo "composer_json_changed=false" >> $GITHUB_ENV
          echo "No changes in composer.json."
        fi

    - name: 🛠 Prepare deploy directory with .env and unzip.php
      run: |
        # Ensure deploy directory exists
        mkdir -p deploy

        # Create unzip.php in deploy directory
        cat > deploy/unzip.php << 'EOF'
        <?php

        function loadEnv() {
            $envPath = __DIR__ . '/.env';
            echo "Checking .env path: $envPath\n";
            if (file_exists($envPath)) {
                echo ".env file found.\n";
                $lines = file($envPath, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
                foreach ($lines as $line) {
                    if (strpos(trim($line), '#') === 0) continue;
                    list($name, $value) = explode('=', $line, 2);
                    $name = trim($name);
                    $value = trim($value);
                    if (strpos($value, '"') === 0 || strpos($value, "'") === 0) {
                        $value = trim($value, '\'"');
                    }
                    putenv("$name=$value");
                }
                return true;
            } else {
                echo ".env file not found.\n";
                return false;
            }
        }

        // Load environment variables
        loadEnv();

        // Debug: Check token loaded
        echo "Loaded DEPLOY_TOKEN: " . getenv('DEPLOY_TOKEN') . "\n";

        // Authentication
        if (!isset($_SERVER['HTTP_X_DEPLOY_TOKEN']) || $_SERVER['HTTP_X_DEPLOY_TOKEN'] !== getenv('DEPLOY_TOKEN')) {
            http_response_code(403);
            echo "Unauthorized. Provided token: " . ($_SERVER['HTTP_X_DEPLOY_TOKEN'] ?? 'none') . "\n";
            exit;
        }

        // Unzip vendor.zip
        $zip = new ZipArchive;
        $res = $zip->open(__DIR__ . '/../api/vendor.zip');
        if ($res === TRUE) {
            $zip->extractTo(__DIR__ . '/../api/');
            $zip->close();
            echo "Vendor directory extracted successfully";
        } else {
            echo "Failed to extract vendor directory";
        }


        EOF

        # Create .env file in deploy directory with DEPLOY_TOKEN
        echo "DEPLOY_TOKEN=${{ secrets.DEPLOY_TOKEN }}" > deploy/.env

        # Export environment variables from deploy/.env to GitHub Actions environment
        echo "Exporting environment variables from deploy/.env file..."
        while IFS='=' read -r key value; do
          if [[ ! "$key" =~ ^# && -n "$key" ]]; then
            echo "$key=$value" >> $GITHUB_ENV
          fi
        done < deploy/.env

    - name: 🚀 Upload files to deploy directory
      uses: SamKirkland/FTP-Deploy-Action@v4.3.5
      with:
        server: ${{ secrets.DEV_FTP_HOST }}
        username: ${{ secrets.DEV_FTP_USERNAME }}
        password: ${{ secrets.DEV_FTP_PASSWORD }}
        local-dir: "deploy/"
        server-dir: "${{ secrets.DEV_BASE_URL }}/deploy/"
        dangerous-clean-slate: false

    - name: 🔧 deploy Node.js 20.x
      uses: actions/deploy-node@v3
      with:
        node-version: "20.x"

    - name: 🚀 Install Frontend Dependencies and Build
      working-directory: frontend
      run: |
        npm install
        npm run build

    - name: 🚀 Deploy Frontend via FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.5
      with:
        server: ${{ secrets.DEV_FTP_HOST }}
        username: ${{ secrets.DEV_FTP_USERNAME }}
        password: ${{ secrets.DEV_FTP_PASSWORD }}
        local-dir: "frontend/dist/"
        server-dir: "${{ secrets.DEV_BASE_URL }}/"
        exclude: |
          **/.env
        dangerous-clean-slate: false

    - name: 🚀 Upload API Code (excluding vendor)
      uses: SamKirkland/FTP-Deploy-Action@v4.3.5
      with:
        server: ${{ secrets.DEV_FTP_HOST }}
        username: ${{ secrets.DEV_FTP_USERNAME }}
        password: ${{ secrets.DEV_FTP_PASSWORD }}
        local-dir: "api/"
        server-dir: "${{ secrets.DEV_BASE_URL }}/api/"
        dangerous-clean-slate: false
        exclude: |
          vendor/*  # This ensures the 'vendor' directory is NOT uploaded
          .env  # You can also exclude .env if needed
          unzip.php  # Exclude unzip.php from API upload

    - name: 🛠 Install PHP Dependencies
      working-directory: api
      run: |
        echo "Installing PHP dependencies..."
        composer update  --no-dev --optimize-autoloader

    - name: 🗜️ Zip the Vendor Directory
      if: env.composer_json_changed == 'true'
      run: |
        cd api
        zip -r vendor.zip vendor  # Zip the vendor directory

    - name: 🚀 Upload Vendor Directory (Zipped)
      if: env.composer_json_changed == 'true'
      uses: SamKirkland/FTP-Deploy-Action@v4.3.5
      with:
        server: ${{ secrets.DEV_FTP_HOST }}
        username: ${{ secrets.DEV_FTP_USERNAME }}
        password: ${{ secrets.DEV_FTP_PASSWORD }}
        local-dir: "api/"
        server-dir: "${{ secrets.DEV_BASE_URL }}/api/"
        exclude: |
          *
          !vendor.zip
        dangerous-clean-slate: false

    - name: 🛠️ Unzip Vendor.zip by calling API
      if: env.composer_json_changed == 'true'
      run: |
        curl https://${{ secrets.DEV_BASE_PATH }}/deploy/unzip.php -H "X-DEPLOY-TOKEN: ${{ secrets.DEPLOY_TOKEN }}"

    - name: 🔄 Run Migrations
      run: |
        curl -X GET "${{ secrets.DEV_BASE_PATH }}/api/run-migrations" -H "X-DEPLOY-TOKEN: ${{ secrets.DEPLOY_TOKEN }}"
